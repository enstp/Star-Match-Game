{"version":3,"sources":["Common/utils.js","Common/constants.js","Components/PlayNumber.js","Components/StarDisplay.js","Components/PlayAgain.js","Components/Game.js","Components/StarMatch.js","App.js","serviceWorker.js","index.js"],"names":["utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","result","includes","exports","constants","colors","available","used","wrong","candidate","PlayNumber","props","handleClick","bind","e","this","onNumberChange","number","status","className","style","backgroundColor","onClick","React","Component","StarDisplay","count","map","starId","key","PlayAgain","onResetGame","isGameOver","gameStatus","color","Game","state","stars","availableNums","candidateNums","secondsLeft","handleNumberChange","handleResetGame","_timerId","onStarNewGame","currentStatus","newCandidateNums","filter","cn","setState","newAvailableNums","n","newStars","updateTimer","isGameDone","clearInterval","retrieveNumberStatus","candidatesAreWrong","setTimeout","currentSeconds","StarMatch","gameId","handleStartNewGame","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4ed32bd.chunk.js","sourcesContent":["// Math science \r\nconst utils = {\r\n    // Sum an array\r\n    sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\r\n  \r\n    // create an array of numbers between min and max (edges included)\r\n    range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\r\n  \r\n    // pick a random number between min and max (edges included)\r\n    random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\r\n  \r\n    // Given an array of numbers and a max...\r\n    // Pick a random sum (< max) from the set of all available sums in arr\r\n    randomSumIn: (arr, max) => {\r\n      const sets = [[]];\r\n      const sums = [];\r\n      for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0, len = sets.length; j < len; j++) {\r\n          const candidateSet = sets[j].concat(arr[i]);\r\n          const candidateSum = utils.sum(candidateSet);\r\n          if (candidateSum <= max) {\r\n            sets.push(candidateSet);\r\n            sums.push(candidateSum);\r\n          }\r\n        }\r\n      }\r\n      var result = sums[utils.random(0, sums.length - 1)];\r\n      return result && !arr.includes(result) ? utils.randomSumIn(arr, max) : result;\r\n    },\r\n  };\r\n\r\n  exports.utils = utils;","const constants = {\r\n\r\n    // Color Theme\r\n    colors: {\r\n        available: 'lightgray',\r\n        used: 'lightgreen',\r\n        wrong: 'lightcoral',\r\n        candidate: 'deepskyblue',\r\n    }\r\n};\r\n\r\nexports.constants = constants;","import React from 'react';\r\nimport { constants } from '../Common/constants'\r\n\r\n\r\nclass PlayNumber extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        this.props.onNumberChange(this.props.number, this.props.status);\r\n    }\r\n\r\n    render() {\r\n        var number = this.props.number;\r\n        var status = this.props.status;\r\n\r\n        return (\r\n            <button className=\"number\" \r\n                style={{ backgroundColor: constants.colors[status] }}\r\n                onClick={this.handleClick}>\r\n                {number}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayNumber","import React from 'react';\r\nimport { utils } from '../Common/utils'\r\n\r\n\r\nclass StarDisplay extends React.Component {\r\n    render() {\r\n        var count = this.props.count;\r\n\r\n        return (\r\n            <>{ utils.range(1, count).map(starId => <div key={starId} className=\"star\" />)  }</>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StarDisplay","import React from 'react';\r\n\r\nclass PlayAgain extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        this.props.onResetGame();\r\n    }\r\n    \r\n    render() {\r\n        const gameStatus = this.props.gameStatus;\r\n        const isGameOver = gameStatus === 'lost';\r\n\r\n        return (\r\n            <div className=\"game-done\">\r\n                <div className=\"message\"\r\n                    style={{ color: isGameOver ? 'red' : 'green' }}>\r\n                    {isGameOver ? 'Game Over' : 'Nice!'}\r\n                </div>\r\n                <button onClick={this.handleClick}>PlayAgain</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayAgain;","import React from 'react';\r\nimport PlayNumber from './PlayNumber'\r\nimport StarDisplay from './StarDisplay'\r\nimport PlayAgain from './PlayAgain'\r\nimport { utils } from '../Common/utils'\r\n\r\nfunction useGameState() {\r\n    \r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stars: utils.random(1, 9),\r\n            availableNums: utils.range(1, 9), //mock data\r\n            candidateNums: [], // mock data\r\n            secondsLeft: 15\r\n        };\r\n\r\n        this.handleNumberChange = this.handleNumberChange.bind(this);\r\n        this.handleResetGame = this.handleResetGame.bind(this);\r\n\r\n        this._timerId = null;\r\n    }\r\n\r\n    //#region Properties\r\n\r\n    get candidatesAreWrong() {\r\n        return utils.sum(this.state.candidateNums) > this.state.stars;\r\n    }\r\n\r\n    get gameStatus() {\r\n        return this.state.availableNums.length === 0\r\n            ? 'won'\r\n            : this.state.secondsLeft === 0 ? 'lost' : 'active';\r\n    }\r\n\r\n    get isGameDone() {\r\n        return !(this.state.secondsLeft > 0 && this.state.availableNums.length > 0);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Events\r\n\r\n    handleResetGame() {\r\n        this.props.onStarNewGame();\r\n    }\r\n\r\n    handleNumberChange(number, currentStatus) {\r\n        if(this.gameStatus !== 'active' || currentStatus === 'used') {\r\n            return;\r\n        }\r\n\r\n        // candidates\r\n        const newCandidateNums = currentStatus === 'available'\r\n            ? this.state.candidateNums.concat(number)\r\n            : this.state.candidateNums.filter(cn => cn !== number);\r\n        \r\n        if(utils.sum(newCandidateNums) !== this.state.stars) {\r\n            this.setState({ candidateNums: newCandidateNums }) \r\n        } else {  // we have a correct pick\r\n            // Shring list of candidates\r\n            const newAvailableNums = this.state.availableNums.filter(n => !newCandidateNums.includes(n));\r\n\r\n            // Redraw number of stars\r\n            var newStars = utils.randomSumIn(newAvailableNums, 9); // Tell Don't Ask principle\r\n            this.setState({ stars: newStars }); \r\n\r\n            this.setState({ availableNums: newAvailableNums }); // Tell Don't Ask principle\r\n\r\n            // Reset Candidate Numbers\r\n            this.setState({ candidateNums: [] });\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region LifeCycle Methods\r\n\r\n    componentDidMount() {\r\n        this._timerId = this.updateTimer();\r\n    }\r\n\r\n    componentWillUpdate() {\r\n        if (!this.isGameDone) {\r\n            clearInterval(this._timerId);\r\n            this._timerId = this.updateTimer();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.isGameDone) {\r\n            clearInterval(this._timerId);\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        var stars = this.state.stars;  \r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"help\">\r\n                    Pick 1 or more numbers that sum to the number of stars\r\n                </div>\r\n\r\n                <div className=\"body\">\r\n                    <div className=\"left\">\r\n                        { this.gameStatus !== 'active'\r\n                            ? <PlayAgain onResetGame={this.handleResetGame} gameStatus={this.gameStatus}/>\r\n                            : <StarDisplay count={stars} /> }\r\n                        \r\n                    </div>\r\n                    <div className=\"right\">\r\n                        { utils.range(1, 9).map(number => \r\n                            <PlayNumber \r\n                                key={number} \r\n                                status={this.retrieveNumberStatus(number)}\r\n                                number={number} \r\n                                onNumberChange={this.handleNumberChange} // lifting state up\r\n                            />) }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"timer\">Time Remaining: {this.state.secondsLeft}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Private Methods\r\n\r\n    retrieveNumberStatus(number) {\r\n        if(!this.state.availableNums.includes(number)) {\r\n            return 'used';\r\n        }\r\n\r\n        if(this.state.candidateNums.includes(number)) {\r\n            return this.candidatesAreWrong ? 'wrong' : 'candidate'; \r\n        }\r\n\r\n        return 'available';\r\n    }\r\n\r\n    updateTimer() {\r\n        return setTimeout(() => {\r\n            const currentSeconds = this.state.secondsLeft;\r\n            this.setState({ secondsLeft: currentSeconds - 1 });\r\n        }, 1000)\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport Game from './Game'\r\n\r\nclass StarMatch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameId: 1\r\n        }\r\n\r\n        this.handleStartNewGame = this.handleStartNewGame.bind(this);\r\n    }\r\n\r\n    handleStartNewGame() {\r\n        let gameId = this.state.gameId;\r\n        this.setState({ gameId: ++gameId });\r\n    }\r\n\r\n    render() {\r\n        var gameId = this.state.gameId;\r\n        return <Game key={gameId} onStarNewGame={this.handleStartNewGame} />\r\n    }\r\n}\r\n\r\nexport default StarMatch;","import React from 'react';\r\nimport StartMatch from './Components/StarMatch'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <StartMatch />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}